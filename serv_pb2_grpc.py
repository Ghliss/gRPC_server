# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import serv_pb2 as serv__pb2


class MqttservicesStub(object):
    """My service

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/serv.Mqttservices/connect',
                request_serializer=serv__pb2.conInfo.SerializeToString,
                response_deserializer=serv__pb2.conRes.FromString,
                )
        self.publish = channel.unary_unary(
                '/serv.Mqttservices/publish',
                request_serializer=serv__pb2.pubInfo.SerializeToString,
                response_deserializer=serv__pb2.pubRes.FromString,
                )
        self.disconnect = channel.unary_unary(
                '/serv.Mqttservices/disconnect',
                request_serializer=serv__pb2.disInfo.SerializeToString,
                response_deserializer=serv__pb2.disRes.FromString,
                )
        self.subscribe = channel.unary_unary(
                '/serv.Mqttservices/subscribe',
                request_serializer=serv__pb2.subInfo.SerializeToString,
                response_deserializer=serv__pb2.subRes.FromString,
                )


class MqttservicesServicer(object):
    """My service

    """

    def connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MqttservicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=serv__pb2.conInfo.FromString,
                    response_serializer=serv__pb2.conRes.SerializeToString,
            ),
            'publish': grpc.unary_unary_rpc_method_handler(
                    servicer.publish,
                    request_deserializer=serv__pb2.pubInfo.FromString,
                    response_serializer=serv__pb2.pubRes.SerializeToString,
            ),
            'disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.disconnect,
                    request_deserializer=serv__pb2.disInfo.FromString,
                    response_serializer=serv__pb2.disRes.SerializeToString,
            ),
            'subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribe,
                    request_deserializer=serv__pb2.subInfo.FromString,
                    response_serializer=serv__pb2.subRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'serv.Mqttservices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mqttservices(object):
    """My service

    """

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serv.Mqttservices/connect',
            serv__pb2.conInfo.SerializeToString,
            serv__pb2.conRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serv.Mqttservices/publish',
            serv__pb2.pubInfo.SerializeToString,
            serv__pb2.pubRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serv.Mqttservices/disconnect',
            serv__pb2.disInfo.SerializeToString,
            serv__pb2.disRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serv.Mqttservices/subscribe',
            serv__pb2.subInfo.SerializeToString,
            serv__pb2.subRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
